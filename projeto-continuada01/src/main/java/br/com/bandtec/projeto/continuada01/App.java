/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.bandtec.projeto.continuada01;

/**
 *
 * @author PICHAU
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btLeitura = new javax.swing.JButton();
        pCPU = new javax.swing.JPanel();
        pbCPU = new javax.swing.JProgressBar();
        lbCPU = new javax.swing.JLabel();
        lbMinCPU = new javax.swing.JLabel();
        lbMeCPU = new javax.swing.JLabel();
        lbMaxCPU = new javax.swing.JLabel();
        lbResultadoCPU = new javax.swing.JLabel();
        rCPU = new javax.swing.JLabel();
        rMinCPU = new javax.swing.JLabel();
        rMeCPU = new javax.swing.JLabel();
        rMaxCPU = new javax.swing.JLabel();
        pCPU1 = new javax.swing.JPanel();
        pbDisco = new javax.swing.JProgressBar();
        lbDisco = new javax.swing.JLabel();
        lbMinDisco = new javax.swing.JLabel();
        lbMeDisco = new javax.swing.JLabel();
        lbMaxDisco = new javax.swing.JLabel();
        lbResultadoDisco = new javax.swing.JLabel();
        rDisco = new javax.swing.JLabel();
        rMinDisco = new javax.swing.JLabel();
        rMeDisco = new javax.swing.JLabel();
        rMaxDisco = new javax.swing.JLabel();
        pCPU2 = new javax.swing.JPanel();
        pbMemoria = new javax.swing.JProgressBar();
        lbMemoria = new javax.swing.JLabel();
        lbMinMemoria = new javax.swing.JLabel();
        lbMeMemoria = new javax.swing.JLabel();
        lbMaxMemoria = new javax.swing.JLabel();
        lbResultadoMemoria = new javax.swing.JLabel();
        rMemoria = new javax.swing.JLabel();
        rMinMemoria = new javax.swing.JLabel();
        rMeMemoria = new javax.swing.JLabel();
        rMaxMemoria = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        btLeitura.setBackground(new java.awt.Color(48, 48, 48));
        btLeitura.setForeground(new java.awt.Color(241, 241, 241));
        btLeitura.setText("Fazer leitura dos dados");
        btLeitura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLeituraActionPerformed(evt);
            }
        });

        pCPU.setBackground(new java.awt.Color(48, 48, 48));
        pCPU.setPreferredSize(new java.awt.Dimension(500, 100));

        pbCPU.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        pbCPU.setPreferredSize(new java.awt.Dimension(350, 30));

        lbCPU.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbCPU.setForeground(new java.awt.Color(241, 241, 241));
        lbCPU.setText("CPU");

        lbMinCPU.setForeground(new java.awt.Color(241, 241, 241));
        lbMinCPU.setText("Mínimo:");

        lbMeCPU.setForeground(new java.awt.Color(241, 241, 241));
        lbMeCPU.setText("Média:");

        lbMaxCPU.setForeground(new java.awt.Color(241, 241, 241));
        lbMaxCPU.setText("Máximo:");

        lbResultadoCPU.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbResultadoCPU.setForeground(new java.awt.Color(241, 241, 241));
        lbResultadoCPU.setText("3.70 GHz");

        rCPU.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        rCPU.setForeground(new java.awt.Color(241, 241, 241));
        rCPU.setText("---");
        rCPU.setToolTipText("");

        rMinCPU.setForeground(new java.awt.Color(241, 241, 241));
        rMinCPU.setText("0");

        rMeCPU.setForeground(new java.awt.Color(241, 241, 241));
        rMeCPU.setText("0");

        rMaxCPU.setForeground(new java.awt.Color(241, 241, 241));
        rMaxCPU.setText("0");

        javax.swing.GroupLayout pCPULayout = new javax.swing.GroupLayout(pCPU);
        pCPU.setLayout(pCPULayout);
        pCPULayout.setHorizontalGroup(
            pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPULayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pCPULayout.createSequentialGroup()
                        .addComponent(lbMinCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMinCPU))
                    .addGroup(pCPULayout.createSequentialGroup()
                        .addComponent(lbMeCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMeCPU))
                    .addGroup(pCPULayout.createSequentialGroup()
                        .addComponent(lbMaxCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMaxCPU)))
                .addGap(102, 102, 102)
                .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbResultadoCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rCPU, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        pCPULayout.setVerticalGroup(
            pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPULayout.createSequentialGroup()
                .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCPU)
                    .addComponent(lbResultadoCPU))
                .addGap(0, 0, 0)
                .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pCPULayout.createSequentialGroup()
                        .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinCPU)
                            .addComponent(rMinCPU))
                        .addGap(10, 10, 10)
                        .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMeCPU)
                            .addComponent(rMeCPU))
                        .addGap(10, 10, 10)
                        .addGroup(pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMaxCPU)
                            .addComponent(rMaxCPU))
                        .addGap(4, 4, 4))
                    .addGroup(pCPULayout.createSequentialGroup()
                        .addComponent(rCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        pCPU1.setBackground(new java.awt.Color(48, 48, 48));
        pCPU1.setPreferredSize(new java.awt.Dimension(500, 100));

        pbDisco.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        pbDisco.setPreferredSize(new java.awt.Dimension(350, 30));

        lbDisco.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbDisco.setForeground(new java.awt.Color(241, 241, 241));
        lbDisco.setText("Disco");

        lbMinDisco.setForeground(new java.awt.Color(241, 241, 241));
        lbMinDisco.setText("Mínimo:");

        lbMeDisco.setForeground(new java.awt.Color(241, 241, 241));
        lbMeDisco.setText("Média:");

        lbMaxDisco.setForeground(new java.awt.Color(241, 241, 241));
        lbMaxDisco.setText("Máximo:");

        lbResultadoDisco.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbResultadoDisco.setForeground(new java.awt.Color(241, 241, 241));
        lbResultadoDisco.setText("120 GB");

        rDisco.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        rDisco.setForeground(new java.awt.Color(241, 241, 241));
        rDisco.setText("---");

        rMinDisco.setForeground(new java.awt.Color(241, 241, 241));
        rMinDisco.setText("0");

        rMeDisco.setForeground(new java.awt.Color(241, 241, 241));
        rMeDisco.setText("0");

        rMaxDisco.setForeground(new java.awt.Color(241, 241, 241));
        rMaxDisco.setText("0");

        javax.swing.GroupLayout pCPU1Layout = new javax.swing.GroupLayout(pCPU1);
        pCPU1.setLayout(pCPU1Layout);
        pCPU1Layout.setHorizontalGroup(
            pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPU1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pCPU1Layout.createSequentialGroup()
                        .addComponent(lbMinDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMinDisco))
                    .addGroup(pCPU1Layout.createSequentialGroup()
                        .addComponent(lbMaxDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMaxDisco))
                    .addGroup(pCPU1Layout.createSequentialGroup()
                        .addComponent(lbMeDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMeDisco)))
                .addGap(102, 102, 102)
                .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbResultadoDisco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbDisco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rDisco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pCPU1Layout.setVerticalGroup(
            pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPU1Layout.createSequentialGroup()
                .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDisco)
                    .addComponent(lbResultadoDisco))
                .addGap(0, 0, 0)
                .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pCPU1Layout.createSequentialGroup()
                        .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinDisco)
                            .addComponent(rMinDisco))
                        .addGap(10, 10, 10)
                        .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMeDisco)
                            .addComponent(rMeDisco))
                        .addGap(10, 10, 10)
                        .addGroup(pCPU1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMaxDisco)
                            .addComponent(rMaxDisco)))
                    .addGroup(pCPU1Layout.createSequentialGroup()
                        .addComponent(rDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );

        pCPU2.setBackground(new java.awt.Color(48, 48, 48));
        pCPU2.setPreferredSize(new java.awt.Dimension(500, 100));

        pbMemoria.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        pbMemoria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pbMemoria.setPreferredSize(new java.awt.Dimension(350, 30));

        lbMemoria.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbMemoria.setForeground(new java.awt.Color(241, 241, 241));
        lbMemoria.setText("Memória");

        lbMinMemoria.setForeground(new java.awt.Color(241, 241, 241));
        lbMinMemoria.setText("Mínimo:");

        lbMeMemoria.setForeground(new java.awt.Color(241, 241, 241));
        lbMeMemoria.setText("Média:");

        lbMaxMemoria.setForeground(new java.awt.Color(241, 241, 241));
        lbMaxMemoria.setText("Máximo:");

        lbResultadoMemoria.setFont(new java.awt.Font("Dubai", 1, 36)); // NOI18N
        lbResultadoMemoria.setForeground(new java.awt.Color(241, 241, 241));
        lbResultadoMemoria.setText("8 GB");

        rMemoria.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        rMemoria.setForeground(new java.awt.Color(241, 241, 241));
        rMemoria.setText("---");

        rMinMemoria.setForeground(new java.awt.Color(241, 241, 241));
        rMinMemoria.setText("0");

        rMeMemoria.setForeground(new java.awt.Color(241, 241, 241));
        rMeMemoria.setText("0");

        rMaxMemoria.setForeground(new java.awt.Color(241, 241, 241));
        rMaxMemoria.setText("0");

        javax.swing.GroupLayout pCPU2Layout = new javax.swing.GroupLayout(pCPU2);
        pCPU2.setLayout(pCPU2Layout);
        pCPU2Layout.setHorizontalGroup(
            pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPU2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pCPU2Layout.createSequentialGroup()
                        .addComponent(lbMaxMemoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMaxMemoria))
                    .addComponent(lbMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pCPU2Layout.createSequentialGroup()
                        .addComponent(lbMinMemoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMinMemoria))
                    .addGroup(pCPU2Layout.createSequentialGroup()
                        .addComponent(lbMeMemoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rMeMemoria)))
                .addGap(102, 102, 102)
                .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbResultadoMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pCPU2Layout.setVerticalGroup(
            pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCPU2Layout.createSequentialGroup()
                .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMemoria)
                    .addComponent(lbResultadoMemoria))
                .addGap(0, 0, 0)
                .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pCPU2Layout.createSequentialGroup()
                        .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMinMemoria)
                            .addComponent(rMinMemoria))
                        .addGap(10, 10, 10)
                        .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMeMemoria)
                            .addComponent(rMeMemoria))
                        .addGap(10, 10, 10)
                        .addGroup(pCPU2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbMaxMemoria)
                            .addComponent(rMaxMemoria)))
                    .addGroup(pCPU2Layout.createSequentialGroup()
                        .addComponent(rMemoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pbMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(btLeitura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(300, 300, 300))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pCPU2, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(pCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(pCPU1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(pCPU2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btLeitura, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Integer cliques = 1;
    
    private void btLeituraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLeituraActionPerformed
        // CPU ------------------------------------------------------------------------------------------------------
        Double random_cpu = Math.random()*3.71;
        String s_random_cpu = String.valueOf(String.format("%.2f",random_cpu).replaceAll(",", "."));
        Integer int_random_cpu = random_cpu.intValue();
        // CPU Text
        rCPU.setText(s_random_cpu);
        Double maxCPU = Double.valueOf(rMaxCPU.getText());
        Double minCPU = Double.valueOf(rMinCPU.getText());
        Double media_CPU = (maxCPU + minCPU) / 2;
        if (cliques.equals(1) || cliques == 1) {
            rMaxCPU.setText(s_random_cpu);
            rMinCPU.setText(s_random_cpu);
            rMeCPU.setText(String.valueOf(String.format("%.2f",(random_cpu + random_cpu) /2).replaceAll(",", ".")));
        } else {
            if (random_cpu >= maxCPU){
                rMaxCPU.setText(s_random_cpu);
                rMeCPU.setText(String.valueOf(String.format("%.2f",media_CPU).replaceAll(",", ".")));
            } 
            if (random_cpu <= minCPU) {
                rMinCPU.setText(s_random_cpu);
                rMeCPU.setText(String.valueOf(String.format("%.2f",media_CPU).replaceAll(",", ".")));
            }
        }
        // ProgressBar CPU
        pbCPU.setMaximum(4);
        pbCPU.setMinimum(0);
        pbCPU.setValue(int_random_cpu);
        // --------------------------------------------------------------------------------------------------------
        
        // Disco ------------------------------------------------------------------------------------------------------
        Double random_disco = Math.random()*120.00;
        String s_random_disco = String.valueOf(String.format("%.2f",random_disco).replaceAll(",", "."));
        Integer int_random_disco = random_disco.intValue();
        // Disco Text
        rDisco.setText(s_random_disco);
        Double maxDisco = Double.valueOf(rMaxDisco.getText());
        Double minDisco = Double.valueOf(rMinDisco.getText());
        Double media_disco = (maxDisco + minDisco) / 2;
        if (cliques.equals(1) || cliques == 1) {
            rMaxDisco.setText(s_random_disco);
            rMinDisco.setText(s_random_disco);
            rMeDisco.setText(String.valueOf(String.format("%.2f",(random_disco + random_disco) /2).replaceAll(",", ".")));
        } else {
            if (random_disco >= maxDisco){
                rMaxDisco.setText(s_random_disco);
                rMeDisco.setText(String.valueOf(String.format("%.2f",media_disco).replaceAll(",", ".")));
            } 
            if (random_disco <= minDisco) {
                rMinDisco.setText(s_random_disco);
                rMeDisco.setText(String.valueOf(String.format("%.2f",media_disco).replaceAll(",", ".")));
            }
        }
        // ProgressBar Disco
        pbDisco.setMaximum(120);
        pbDisco.setMinimum(0);
        pbDisco.setValue(int_random_disco);
        // --------------------------------------------------------------------------------------------------------
        
        // Memoria ------------------------------------------------------------------------------------------------------
        Double random_memoria = Math.random()*8.00;
        String s_random_memoria = String.valueOf(String.format("%.2f",random_memoria).replaceAll(",", "."));
        Integer int_random_memoria = random_memoria.intValue();
        // Memora Text
        rMemoria.setText(s_random_memoria);
        Double maxMemoria = Double.valueOf(rMaxMemoria.getText());
        Double minMemoria = Double.valueOf(rMinMemoria.getText());
        Double media_memoria = (maxMemoria + minMemoria) / 2;
        if (cliques.equals(1) || cliques == 1) {
            rMaxMemoria.setText(s_random_memoria);
            rMinMemoria.setText(s_random_memoria);
            rMeMemoria.setText(String.valueOf(String.format("%.2f",(random_memoria + random_memoria) /2).replaceAll(",", ".")));
        } else {
            if (random_memoria >= maxMemoria){
                rMaxMemoria.setText(s_random_memoria);
                rMeMemoria.setText(String.valueOf(String.format("%.2f",media_memoria).replaceAll(",", ".")));
            } 
            if (random_memoria <= minMemoria) {
                rMinMemoria.setText(s_random_memoria);
                rMeMemoria.setText(String.valueOf(String.format("%.2f",media_memoria).replaceAll(",", ".")));
            }
        }
        // ProgressBar Memoria
        pbMemoria.setMaximum(8);
        pbMemoria.setMinimum(0);
        pbMemoria.setValue(int_random_memoria);
        // --------------------------------------------------------------------------------------------------------

        cliques += 1;
    }//GEN-LAST:event_btLeituraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLeitura;
    private javax.swing.JLabel lbCPU;
    private javax.swing.JLabel lbDisco;
    private javax.swing.JLabel lbMaxCPU;
    private javax.swing.JLabel lbMaxDisco;
    private javax.swing.JLabel lbMaxMemoria;
    private javax.swing.JLabel lbMeCPU;
    private javax.swing.JLabel lbMeDisco;
    private javax.swing.JLabel lbMeMemoria;
    private javax.swing.JLabel lbMemoria;
    private javax.swing.JLabel lbMinCPU;
    private javax.swing.JLabel lbMinDisco;
    private javax.swing.JLabel lbMinMemoria;
    private javax.swing.JLabel lbResultadoCPU;
    private javax.swing.JLabel lbResultadoDisco;
    private javax.swing.JLabel lbResultadoMemoria;
    private javax.swing.JPanel pCPU;
    private javax.swing.JPanel pCPU1;
    private javax.swing.JPanel pCPU2;
    private javax.swing.JProgressBar pbCPU;
    private javax.swing.JProgressBar pbDisco;
    private javax.swing.JProgressBar pbMemoria;
    private javax.swing.JLabel rCPU;
    private javax.swing.JLabel rDisco;
    private javax.swing.JLabel rMaxCPU;
    private javax.swing.JLabel rMaxDisco;
    private javax.swing.JLabel rMaxMemoria;
    private javax.swing.JLabel rMeCPU;
    private javax.swing.JLabel rMeDisco;
    private javax.swing.JLabel rMeMemoria;
    private javax.swing.JLabel rMemoria;
    private javax.swing.JLabel rMinCPU;
    private javax.swing.JLabel rMinDisco;
    private javax.swing.JLabel rMinMemoria;
    // End of variables declaration//GEN-END:variables
}
